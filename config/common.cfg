//
// Map parameters
//
Map.DataDir = /home/alex/Data/sequences
Map.OrigFramesDir = /home/alex/Data  // used to find the original frames
// Whether to load the original image files or the mono ones saved by PTAM
Map.LoadOriginalFrames = 1
// The name of the gvar containing parameters for the default camera
Map.DefaultCamera = Camera
// Whether to approximate the camera by a first-order taylor expansion
Map.LinearizeCamera = 1

//
// Size of frame images
//
Camera.ImageSize=[ 640 480 ]

//
// Load the appropriate camera calibration parameters
//
//exec config/cameras/tz3_nodist_err048.cfg

// Calibration for Lumix TZ3 video at 640x480, 30 fps, calibration residual error was 0.48 pixels
Camera.Parameters=[ 0.838677 1.12028 0.511791 0.494215 0 ]

//
// Line detector parameters
//

// Minimum size for line segments is the maximum of these two parameters...
LineDetector.MinCompSize = .025  // as fraction of image size
//LineDetector.MinCompSize = .2  // temporarily use really large components
// Minimum size for line segments, as fraction of image size
LineDetector.MinCompSizePixels = 10  // as absolute number of pixels

// Number of orientation bins
LineDetector.NumOrientBins = 16
// Tolerance for tracing connected components, in terms of orient bins
LineDetector.OrientTol = 1

//
// Vanishing point detector parameters
//

// Default algorithm to use
VanPts.DefaultStrategy = EM  // Can be "EM" or "Ransac"
// Number of vanishing points
VanPts.NumVanishingPts = 3
// Number of k-means components for bootstrap
VanPts.NumBootstrapClusters = 3
// Minimum support for a kmeans cluster to be used in bootstrapping
VanPts.MinBootstrapSupport = 2;

// Bandwidth for the error model that relates vanishing points and
// line segments:
//    p(line_segment | vanishing_point) = Gauss( . ; sigma)
EMVanPts.ErrorModelSigma = 0.001
// Threshold for merging two vanishing points during EM
EMVanPts.MergeThreshold = 0.00001
// Threshold for exiting EM
EMVanPts.ExitThreshold = 0.00000001
// Log likelihood for spurious (not axis aligned) edges
EMVanPts.SpuriousLogLik = -5000.0
// Threshold below which an existing vanishing point adopts a new line
EMVanPts.AdoptThreshold = 0.01

// Number of ransac iterations
RansacVanPts.NumIterations = 10000
// Threshold below which a line "votes" for a propose vanpt
RansacVanPts.VoteThreshold = 0.05


// Extra image padding in vanishing point vizualization
VanPtsViz.ImagePadding = 100
// Alpha for drawing vanishing point extension lines
VanPtsViz.VanLineAlpha = 0.2

//
// K-means cluster parameters
//
KMeans.MaxIterations = 100
KMeans.ExitThreshold = 0.000001

//
// Segmenter params
//
// Determines segment size (larger K => larger segment)
FHSegmenter.K = 150
// Minimum segment size
FHSegmenter.MinSize = 50
// Threshold below which pixels will automatically be grouped
FHSegmenter.MinDiff = 1
// Smoothing bandwidth applied before segmentation
FHSegmenter.SmoothingSigma = 0.8


//
// Plane classifier params
//
// How far outside image regions to look for line segments
GeomLabeller.SearchRadiusMult = 0.3
// Minimum fraction of connected pixels for region/line adjacency
GeomLabeller.MinConnectedPixels = 0.4

//
// Consensus vanpts params
//
ConsVanPts.NumIterations = 200
ConsVanPts.VoteThreshold = 0.01

//
// Canny line detector parameters
//
Gradients.SmoothingSigma = 1.0  // bandwidth for smoothing
Canny.ThreshLow = 20        // 10
Canny.ThreshHigh = 100       // 30
Canny.NumOrientBins = 16
Canny.NumThreads = 4
MultiScaleCanny.NumScales = 1

//
// Sobel convolution parameters
//
// Binary variable indicating whether or not to parallelize sobel
// convolutions. If true, number of threads will be determined
// automatically from hardware type.	
Sobel.Parallelize = 0  // turned this off for MEX

//
// Filter bank parameters
//
FilterBank.DefaultParallelism = "CPU-Sequential"  // CPU-Sequential, CPU-Parallel, or GPU



//
// Texton parameters
//
// Parameters for Gabor filters
Textons.Filters.NumScales = 3
Textons.Filters.NumOrients = 4

// What type of color information to include in the feature vector
Textons.Features.ColorInfo = 2  // = RGB colors
// Weighting for Gabor filter components of feature vector
Textons.Features.GaborWeight = 1.0
// Weightings for Mono component of feature vector
Textons.Features.MonoWeight = 1.0
// Weighting for RGB components of feature vector
Textons.Features.RWeight = 6.0
Textons.Features.GWeight = 6.0
Textons.Features.BWeight = 6.0
// Weighting for HSV components of feature vector.
Textons.Features.HWeight = 6.0
Textons.Features.SWeight = 2.0
Textons.Features.VWeight = 2.0

// Strategy for filtering
Textons.FilterStrategy = "CPUParallel"  // CPU, CPUParallel, or GPU

// File containing the texton vocabulary
Textons.VocabFile = "vocab.txt"
// Directory for caching texton maps. Cache keys are based on the MD5
// sum of the keyframe image provided in map.xml.
Textons.Mapper.CacheDir="texton-cache"

//
// Line sweeper parameters
//

// Extension to add to end of potentially-blocking line segments when
// sweeping
LineSweeper.BlockMarginSqr = 0

//
// Parameters for the rotation estimation gradient descent
//
RotationEstimator.AbsTol = 0.0001
RotationEstimator.RelTol = 0.000001
RotationEstimator.MaxSteps = 10;


//
// The map vizualizer settings
//
MapViz.RenderVpts=0
MapViz.RenderProjectedLines=0
MapViz.RenderPeakPlanes=1
// Factor to move retina plane by when pressing , or .
MapViz.RetinaPosDelta=1.3

//
// Plane detector
//
MIPlanes.SearchDensity=40
MIPlanes.SampleDensity=200

//
// UI parameters
//
GlutWindow.DoubleClickTime = 0.2  // in seconds

//
// Parameters for the vpt-guided line detector
//

// Threshold on gradient magnitude for a pixel to become an edge
GuidedLineDetector.MagThresh = 7
// To decide if a pixel is assocated with a vanishing point we draw a
// line from the vanishing point to the pixel center and compute the
// distance from that line to the end of the one-pixel-long tangent
// vector at the pixel. If less than this threshold, it counts.
GuidedLineDetector.DistThresh = 0.1
// Minimum number of support pixels for a local maximum in the
// histogram to be counted as a line.
GuidedLineDetector.MinPeak = 2000



//
// Parameters for the structure recovery algorithm of Manhattan et al
//

// Threshold at which a corner is considered to be an "occluding"
// corner. If two horizontal lines meet within this threhold at the
// corner then the corner is either concave or convex.
ManhattanRecovery.CnrOcclusionThresh = 5
// Never add two edges within this number of pixels from each other
ManhattanRecovery.MinCornerMargin = 10
// Maxmimum number of corners to add (not including the initial two)
ManhattanRecovery.MaxCorners = 2
// Resolution at which surface orientations are predicted and compared
ManhattanRecovery.OrientRes = 50

//
// ManhattanDP Parameters
//

// The default penalty per wall (for regularisation)
//ManhattanDP.DefaultWallPenalty = 3000
ManhattanDP.DefaultWallPenalty = 2.0
// The default penalty per occluding corner (in _addition_ to the per-wall penalty)
//ManhattanDP.DefaultOcclusionPenalty = 2000
ManhattanDP.DefaultOcclusionPenalty = 2.0
// The size of the grid in which we perform the DP
// Make this high so we can model scenes with walls extending outside the image bounds
// These numbers were taken from the old implementation, which calculated this
// parameter from OrientSampleFactor and ExtraSearchMargin below
ManhattanDP.GridSize = [ 320 480 ] //  [ 160 300 ] //216
// If we arrive at a pixel such that the distance from the pixel
// centre to the line, divided by the distance from the pixel centre
// to the source, is less than this threshold, then delegate to that
// pixel and don't search any further.
ManhattanDP.LineJumpThreshold = 0.01;  // measured in pixels

//
// Parameters for finding sequences and their maps
//
Sequences.DataDir = /home/alex/Data/sequences
Sequences.MapPath = ground_truth/truthed_map.pro


//
// Parameters for features for manhattan reconstruction
//
BuildingFeatures.DefaultSet = "all"
BuildingFeatures.GaborScales = 3
BuildingFeatures.GaborOrientations = 6


//
// Device and calibration parameters for the Kinect
//
Kinect.CalibrationDir = "/home/alex/Code/indoor_context/config/kinect_calibration"




Tata.BeginFrame = 300;
Tata.BeginCoords = 600;
Tata.BeginModel = 800;
Tata.EndFrame = -1;
Tata.Stride = 3;

