// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "map.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>

namespace indoor_context {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* Vec2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Vec2_reflection_ = NULL;
const ::google::protobuf::Descriptor* Vec3_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Vec3_reflection_ = NULL;
const ::google::protobuf::Descriptor* Vec4_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Vec4_reflection_ = NULL;
const ::google::protobuf::Descriptor* Vec5_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Vec5_reflection_ = NULL;
const ::google::protobuf::Descriptor* Vec6_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Vec6_reflection_ = NULL;
const ::google::protobuf::Descriptor* FloorPlan_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FloorPlan_reflection_ = NULL;
const ::google::protobuf::Descriptor* ImagePng_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ImagePng_reflection_ = NULL;
const ::google::protobuf::Descriptor* TruthedFrame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TruthedFrame_reflection_ = NULL;
const ::google::protobuf::Descriptor* TruthedMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TruthedMap_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_map_2eproto() {
  protobuf_AddDesc_map_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "map.proto");
  GOOGLE_CHECK(file != NULL);
  Vec2_descriptor_ = file->message_type(0);
  static const int Vec2_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vec2, x1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vec2, x2_),
  };
  Vec2_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Vec2_descriptor_,
      Vec2::default_instance_,
      Vec2_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vec2, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vec2, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Vec2));
  Vec3_descriptor_ = file->message_type(1);
  static const int Vec3_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vec3, x1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vec3, x2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vec3, x3_),
  };
  Vec3_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Vec3_descriptor_,
      Vec3::default_instance_,
      Vec3_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vec3, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vec3, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Vec3));
  Vec4_descriptor_ = file->message_type(2);
  static const int Vec4_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vec4, x1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vec4, x2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vec4, x3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vec4, x4_),
  };
  Vec4_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Vec4_descriptor_,
      Vec4::default_instance_,
      Vec4_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vec4, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vec4, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Vec4));
  Vec5_descriptor_ = file->message_type(3);
  static const int Vec5_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vec5, x1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vec5, x2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vec5, x3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vec5, x4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vec5, x5_),
  };
  Vec5_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Vec5_descriptor_,
      Vec5::default_instance_,
      Vec5_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vec5, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vec5, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Vec5));
  Vec6_descriptor_ = file->message_type(4);
  static const int Vec6_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vec6, x1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vec6, x2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vec6, x3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vec6, x4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vec6, x5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vec6, x6_),
  };
  Vec6_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Vec6_descriptor_,
      Vec6::default_instance_,
      Vec6_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vec6, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vec6, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Vec6));
  FloorPlan_descriptor_ = file->message_type(5);
  static const int FloorPlan_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloorPlan, zfloor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloorPlan, zceil_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloorPlan, vertices_),
  };
  FloorPlan_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FloorPlan_descriptor_,
      FloorPlan::default_instance_,
      FloorPlan_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloorPlan, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloorPlan, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FloorPlan));
  ImagePng_descriptor_ = file->message_type(6);
  static const int ImagePng_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImagePng, nx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImagePng, ny_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImagePng, data_),
  };
  ImagePng_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ImagePng_descriptor_,
      ImagePng::default_instance_,
      ImagePng_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImagePng, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImagePng, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ImagePng));
  TruthedFrame_descriptor_ = file->message_type(7);
  static const int TruthedFrame_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TruthedFrame, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TruthedFrame, orient_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TruthedFrame, orient_map_file_),
  };
  TruthedFrame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TruthedFrame_descriptor_,
      TruthedFrame::default_instance_,
      TruthedFrame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TruthedFrame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TruthedFrame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TruthedFrame));
  TruthedMap_descriptor_ = file->message_type(8);
  static const int TruthedMap_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TruthedMap, ln_scene_from_slam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TruthedMap, spec_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TruthedMap, frame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TruthedMap, floorplan_),
  };
  TruthedMap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TruthedMap_descriptor_,
      TruthedMap::default_instance_,
      TruthedMap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TruthedMap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TruthedMap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TruthedMap));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_map_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Vec2_descriptor_, &Vec2::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Vec3_descriptor_, &Vec3::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Vec4_descriptor_, &Vec4::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Vec5_descriptor_, &Vec5::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Vec6_descriptor_, &Vec6::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FloorPlan_descriptor_, &FloorPlan::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ImagePng_descriptor_, &ImagePng::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TruthedFrame_descriptor_, &TruthedFrame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TruthedMap_descriptor_, &TruthedMap::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_map_2eproto() {
  delete Vec2::default_instance_;
  delete Vec2_reflection_;
  delete Vec3::default_instance_;
  delete Vec3_reflection_;
  delete Vec4::default_instance_;
  delete Vec4_reflection_;
  delete Vec5::default_instance_;
  delete Vec5_reflection_;
  delete Vec6::default_instance_;
  delete Vec6_reflection_;
  delete FloorPlan::default_instance_;
  delete FloorPlan_reflection_;
  delete ImagePng::default_instance_;
  delete ImagePng_reflection_;
  delete TruthedFrame::default_instance_;
  delete TruthedFrame_reflection_;
  delete TruthedMap::default_instance_;
  delete TruthedMap_reflection_;
}

void protobuf_AddDesc_map_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tmap.proto\022\024indoor_context.proto\"\036\n\004Vec"
    "2\022\n\n\002x1\030\001 \002(\001\022\n\n\002x2\030\002 \002(\001\"*\n\004Vec3\022\n\n\002x1\030"
    "\001 \002(\001\022\n\n\002x2\030\002 \002(\001\022\n\n\002x3\030\003 \002(\001\"6\n\004Vec4\022\n\n"
    "\002x1\030\001 \002(\001\022\n\n\002x2\030\002 \002(\001\022\n\n\002x3\030\003 \002(\001\022\n\n\002x4\030"
    "\004 \002(\001\"B\n\004Vec5\022\n\n\002x1\030\001 \002(\001\022\n\n\002x2\030\002 \002(\001\022\n\n"
    "\002x3\030\003 \002(\001\022\n\n\002x4\030\004 \002(\001\022\n\n\002x5\030\005 \002(\001\"N\n\004Vec"
    "6\022\n\n\002x1\030\001 \002(\001\022\n\n\002x2\030\002 \002(\001\022\n\n\002x3\030\003 \002(\001\022\n\n"
    "\002x4\030\004 \002(\001\022\n\n\002x5\030\005 \002(\001\022\n\n\002x6\030\006 \002(\001\"X\n\tFlo"
    "orPlan\022\016\n\006zfloor\030\001 \002(\001\022\r\n\005zceil\030\002 \002(\001\022,\n"
    "\010vertices\030\003 \003(\0132\032.indoor_context.proto.V"
    "ec2\"0\n\010ImagePng\022\n\n\002nx\030\001 \002(\005\022\n\n\002ny\030\002 \002(\005\022"
    "\014\n\004data\030\003 \002(\t\"g\n\014TruthedFrame\022\n\n\002id\030\001 \002("
    "\005\0222\n\norient_map\030\002 \001(\0132\036.indoor_context.p"
    "roto.ImagePng\022\027\n\017orient_map_file\030\003 \001(\t\"\276"
    "\001\n\nTruthedMap\0226\n\022ln_scene_from_slam\030\001 \001("
    "\0132\032.indoor_context.proto.Vec3\022\021\n\tspec_fi"
    "le\030\002 \001(\t\0221\n\005frame\030\003 \003(\0132\".indoor_context"
    ".proto.TruthedFrame\0222\n\tfloorplan\030\004 \001(\0132\037"
    ".indoor_context.proto.FloorPlan", 751);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "map.proto", &protobuf_RegisterTypes);
  Vec2::default_instance_ = new Vec2();
  Vec3::default_instance_ = new Vec3();
  Vec4::default_instance_ = new Vec4();
  Vec5::default_instance_ = new Vec5();
  Vec6::default_instance_ = new Vec6();
  FloorPlan::default_instance_ = new FloorPlan();
  ImagePng::default_instance_ = new ImagePng();
  TruthedFrame::default_instance_ = new TruthedFrame();
  TruthedMap::default_instance_ = new TruthedMap();
  Vec2::default_instance_->InitAsDefaultInstance();
  Vec3::default_instance_->InitAsDefaultInstance();
  Vec4::default_instance_->InitAsDefaultInstance();
  Vec5::default_instance_->InitAsDefaultInstance();
  Vec6::default_instance_->InitAsDefaultInstance();
  FloorPlan::default_instance_->InitAsDefaultInstance();
  ImagePng::default_instance_->InitAsDefaultInstance();
  TruthedFrame::default_instance_->InitAsDefaultInstance();
  TruthedMap::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_map_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_map_2eproto {
  StaticDescriptorInitializer_map_2eproto() {
    protobuf_AddDesc_map_2eproto();
  }
} static_descriptor_initializer_map_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int Vec2::kX1FieldNumber;
const int Vec2::kX2FieldNumber;
#endif  // !_MSC_VER

Vec2::Vec2() {
  SharedCtor();
}

void Vec2::InitAsDefaultInstance() {
}

Vec2::Vec2(const Vec2& from) {
  SharedCtor();
  MergeFrom(from);
}

void Vec2::SharedCtor() {
  _cached_size_ = 0;
  x1_ = 0;
  x2_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Vec2::~Vec2() {
  SharedDtor();
}

void Vec2::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* Vec2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Vec2_descriptor_;
}

const Vec2& Vec2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();  return *default_instance_;
}

Vec2* Vec2::default_instance_ = NULL;

Vec2* Vec2::New() const {
  return new Vec2;
}

void Vec2::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x1_ = 0;
    x2_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Vec2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double x1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadDouble(
              input, &x1_));
        _set_bit(0);
        if (input->ExpectTag(17)) goto parse_x2;
        break;
      }
      
      // required double x2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          goto handle_uninterpreted;
        }
       parse_x2:
        DO_(::google::protobuf::internal::WireFormatLite::ReadDouble(
              input, &x2_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Vec2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    Vec2::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required double x1 = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x1(), output);
  }
  
  // required double x2 = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->x2(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Vec2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double x1 = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x1(), target);
  }
  
  // required double x2 = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->x2(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Vec2::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double x1 = 1;
    if (has_x1()) {
      total_size += 1 + 8;
    }
    
    // required double x2 = 2;
    if (has_x2()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void Vec2::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Vec2* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Vec2*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Vec2::MergeFrom(const Vec2& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_x1(from.x1());
    }
    if (from._has_bit(1)) {
      set_x2(from.x2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Vec2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vec2::CopyFrom(const Vec2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vec2::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void Vec2::Swap(Vec2* other) {
  if (other != this) {
    std::swap(x1_, other->x1_);
    std::swap(x2_, other->x2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Vec2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Vec2_descriptor_;
  metadata.reflection = Vec2_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Vec3::kX1FieldNumber;
const int Vec3::kX2FieldNumber;
const int Vec3::kX3FieldNumber;
#endif  // !_MSC_VER

Vec3::Vec3() {
  SharedCtor();
}

void Vec3::InitAsDefaultInstance() {
}

Vec3::Vec3(const Vec3& from) {
  SharedCtor();
  MergeFrom(from);
}

void Vec3::SharedCtor() {
  _cached_size_ = 0;
  x1_ = 0;
  x2_ = 0;
  x3_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Vec3::~Vec3() {
  SharedDtor();
}

void Vec3::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* Vec3::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Vec3_descriptor_;
}

const Vec3& Vec3::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();  return *default_instance_;
}

Vec3* Vec3::default_instance_ = NULL;

Vec3* Vec3::New() const {
  return new Vec3;
}

void Vec3::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x1_ = 0;
    x2_ = 0;
    x3_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Vec3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double x1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadDouble(
              input, &x1_));
        _set_bit(0);
        if (input->ExpectTag(17)) goto parse_x2;
        break;
      }
      
      // required double x2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          goto handle_uninterpreted;
        }
       parse_x2:
        DO_(::google::protobuf::internal::WireFormatLite::ReadDouble(
              input, &x2_));
        _set_bit(1);
        if (input->ExpectTag(25)) goto parse_x3;
        break;
      }
      
      // required double x3 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          goto handle_uninterpreted;
        }
       parse_x3:
        DO_(::google::protobuf::internal::WireFormatLite::ReadDouble(
              input, &x3_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Vec3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    Vec3::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required double x1 = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x1(), output);
  }
  
  // required double x2 = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->x2(), output);
  }
  
  // required double x3 = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->x3(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Vec3::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double x1 = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x1(), target);
  }
  
  // required double x2 = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->x2(), target);
  }
  
  // required double x3 = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->x3(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Vec3::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double x1 = 1;
    if (has_x1()) {
      total_size += 1 + 8;
    }
    
    // required double x2 = 2;
    if (has_x2()) {
      total_size += 1 + 8;
    }
    
    // required double x3 = 3;
    if (has_x3()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void Vec3::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Vec3* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Vec3*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Vec3::MergeFrom(const Vec3& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_x1(from.x1());
    }
    if (from._has_bit(1)) {
      set_x2(from.x2());
    }
    if (from._has_bit(2)) {
      set_x3(from.x3());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Vec3::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vec3::CopyFrom(const Vec3& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vec3::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void Vec3::Swap(Vec3* other) {
  if (other != this) {
    std::swap(x1_, other->x1_);
    std::swap(x2_, other->x2_);
    std::swap(x3_, other->x3_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Vec3::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Vec3_descriptor_;
  metadata.reflection = Vec3_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Vec4::kX1FieldNumber;
const int Vec4::kX2FieldNumber;
const int Vec4::kX3FieldNumber;
const int Vec4::kX4FieldNumber;
#endif  // !_MSC_VER

Vec4::Vec4() {
  SharedCtor();
}

void Vec4::InitAsDefaultInstance() {
}

Vec4::Vec4(const Vec4& from) {
  SharedCtor();
  MergeFrom(from);
}

void Vec4::SharedCtor() {
  _cached_size_ = 0;
  x1_ = 0;
  x2_ = 0;
  x3_ = 0;
  x4_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Vec4::~Vec4() {
  SharedDtor();
}

void Vec4::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* Vec4::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Vec4_descriptor_;
}

const Vec4& Vec4::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();  return *default_instance_;
}

Vec4* Vec4::default_instance_ = NULL;

Vec4* Vec4::New() const {
  return new Vec4;
}

void Vec4::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x1_ = 0;
    x2_ = 0;
    x3_ = 0;
    x4_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Vec4::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double x1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadDouble(
              input, &x1_));
        _set_bit(0);
        if (input->ExpectTag(17)) goto parse_x2;
        break;
      }
      
      // required double x2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          goto handle_uninterpreted;
        }
       parse_x2:
        DO_(::google::protobuf::internal::WireFormatLite::ReadDouble(
              input, &x2_));
        _set_bit(1);
        if (input->ExpectTag(25)) goto parse_x3;
        break;
      }
      
      // required double x3 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          goto handle_uninterpreted;
        }
       parse_x3:
        DO_(::google::protobuf::internal::WireFormatLite::ReadDouble(
              input, &x3_));
        _set_bit(2);
        if (input->ExpectTag(33)) goto parse_x4;
        break;
      }
      
      // required double x4 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          goto handle_uninterpreted;
        }
       parse_x4:
        DO_(::google::protobuf::internal::WireFormatLite::ReadDouble(
              input, &x4_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Vec4::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    Vec4::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required double x1 = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x1(), output);
  }
  
  // required double x2 = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->x2(), output);
  }
  
  // required double x3 = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->x3(), output);
  }
  
  // required double x4 = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->x4(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Vec4::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double x1 = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x1(), target);
  }
  
  // required double x2 = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->x2(), target);
  }
  
  // required double x3 = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->x3(), target);
  }
  
  // required double x4 = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->x4(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Vec4::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double x1 = 1;
    if (has_x1()) {
      total_size += 1 + 8;
    }
    
    // required double x2 = 2;
    if (has_x2()) {
      total_size += 1 + 8;
    }
    
    // required double x3 = 3;
    if (has_x3()) {
      total_size += 1 + 8;
    }
    
    // required double x4 = 4;
    if (has_x4()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void Vec4::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Vec4* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Vec4*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Vec4::MergeFrom(const Vec4& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_x1(from.x1());
    }
    if (from._has_bit(1)) {
      set_x2(from.x2());
    }
    if (from._has_bit(2)) {
      set_x3(from.x3());
    }
    if (from._has_bit(3)) {
      set_x4(from.x4());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Vec4::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vec4::CopyFrom(const Vec4& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vec4::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void Vec4::Swap(Vec4* other) {
  if (other != this) {
    std::swap(x1_, other->x1_);
    std::swap(x2_, other->x2_);
    std::swap(x3_, other->x3_);
    std::swap(x4_, other->x4_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Vec4::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Vec4_descriptor_;
  metadata.reflection = Vec4_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Vec5::kX1FieldNumber;
const int Vec5::kX2FieldNumber;
const int Vec5::kX3FieldNumber;
const int Vec5::kX4FieldNumber;
const int Vec5::kX5FieldNumber;
#endif  // !_MSC_VER

Vec5::Vec5() {
  SharedCtor();
}

void Vec5::InitAsDefaultInstance() {
}

Vec5::Vec5(const Vec5& from) {
  SharedCtor();
  MergeFrom(from);
}

void Vec5::SharedCtor() {
  _cached_size_ = 0;
  x1_ = 0;
  x2_ = 0;
  x3_ = 0;
  x4_ = 0;
  x5_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Vec5::~Vec5() {
  SharedDtor();
}

void Vec5::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* Vec5::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Vec5_descriptor_;
}

const Vec5& Vec5::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();  return *default_instance_;
}

Vec5* Vec5::default_instance_ = NULL;

Vec5* Vec5::New() const {
  return new Vec5;
}

void Vec5::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x1_ = 0;
    x2_ = 0;
    x3_ = 0;
    x4_ = 0;
    x5_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Vec5::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double x1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadDouble(
              input, &x1_));
        _set_bit(0);
        if (input->ExpectTag(17)) goto parse_x2;
        break;
      }
      
      // required double x2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          goto handle_uninterpreted;
        }
       parse_x2:
        DO_(::google::protobuf::internal::WireFormatLite::ReadDouble(
              input, &x2_));
        _set_bit(1);
        if (input->ExpectTag(25)) goto parse_x3;
        break;
      }
      
      // required double x3 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          goto handle_uninterpreted;
        }
       parse_x3:
        DO_(::google::protobuf::internal::WireFormatLite::ReadDouble(
              input, &x3_));
        _set_bit(2);
        if (input->ExpectTag(33)) goto parse_x4;
        break;
      }
      
      // required double x4 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          goto handle_uninterpreted;
        }
       parse_x4:
        DO_(::google::protobuf::internal::WireFormatLite::ReadDouble(
              input, &x4_));
        _set_bit(3);
        if (input->ExpectTag(41)) goto parse_x5;
        break;
      }
      
      // required double x5 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          goto handle_uninterpreted;
        }
       parse_x5:
        DO_(::google::protobuf::internal::WireFormatLite::ReadDouble(
              input, &x5_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Vec5::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    Vec5::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required double x1 = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x1(), output);
  }
  
  // required double x2 = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->x2(), output);
  }
  
  // required double x3 = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->x3(), output);
  }
  
  // required double x4 = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->x4(), output);
  }
  
  // required double x5 = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->x5(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Vec5::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double x1 = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x1(), target);
  }
  
  // required double x2 = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->x2(), target);
  }
  
  // required double x3 = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->x3(), target);
  }
  
  // required double x4 = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->x4(), target);
  }
  
  // required double x5 = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->x5(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Vec5::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double x1 = 1;
    if (has_x1()) {
      total_size += 1 + 8;
    }
    
    // required double x2 = 2;
    if (has_x2()) {
      total_size += 1 + 8;
    }
    
    // required double x3 = 3;
    if (has_x3()) {
      total_size += 1 + 8;
    }
    
    // required double x4 = 4;
    if (has_x4()) {
      total_size += 1 + 8;
    }
    
    // required double x5 = 5;
    if (has_x5()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void Vec5::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Vec5* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Vec5*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Vec5::MergeFrom(const Vec5& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_x1(from.x1());
    }
    if (from._has_bit(1)) {
      set_x2(from.x2());
    }
    if (from._has_bit(2)) {
      set_x3(from.x3());
    }
    if (from._has_bit(3)) {
      set_x4(from.x4());
    }
    if (from._has_bit(4)) {
      set_x5(from.x5());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Vec5::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vec5::CopyFrom(const Vec5& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vec5::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void Vec5::Swap(Vec5* other) {
  if (other != this) {
    std::swap(x1_, other->x1_);
    std::swap(x2_, other->x2_);
    std::swap(x3_, other->x3_);
    std::swap(x4_, other->x4_);
    std::swap(x5_, other->x5_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Vec5::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Vec5_descriptor_;
  metadata.reflection = Vec5_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Vec6::kX1FieldNumber;
const int Vec6::kX2FieldNumber;
const int Vec6::kX3FieldNumber;
const int Vec6::kX4FieldNumber;
const int Vec6::kX5FieldNumber;
const int Vec6::kX6FieldNumber;
#endif  // !_MSC_VER

Vec6::Vec6() {
  SharedCtor();
}

void Vec6::InitAsDefaultInstance() {
}

Vec6::Vec6(const Vec6& from) {
  SharedCtor();
  MergeFrom(from);
}

void Vec6::SharedCtor() {
  _cached_size_ = 0;
  x1_ = 0;
  x2_ = 0;
  x3_ = 0;
  x4_ = 0;
  x5_ = 0;
  x6_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Vec6::~Vec6() {
  SharedDtor();
}

void Vec6::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* Vec6::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Vec6_descriptor_;
}

const Vec6& Vec6::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();  return *default_instance_;
}

Vec6* Vec6::default_instance_ = NULL;

Vec6* Vec6::New() const {
  return new Vec6;
}

void Vec6::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x1_ = 0;
    x2_ = 0;
    x3_ = 0;
    x4_ = 0;
    x5_ = 0;
    x6_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Vec6::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double x1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadDouble(
              input, &x1_));
        _set_bit(0);
        if (input->ExpectTag(17)) goto parse_x2;
        break;
      }
      
      // required double x2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          goto handle_uninterpreted;
        }
       parse_x2:
        DO_(::google::protobuf::internal::WireFormatLite::ReadDouble(
              input, &x2_));
        _set_bit(1);
        if (input->ExpectTag(25)) goto parse_x3;
        break;
      }
      
      // required double x3 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          goto handle_uninterpreted;
        }
       parse_x3:
        DO_(::google::protobuf::internal::WireFormatLite::ReadDouble(
              input, &x3_));
        _set_bit(2);
        if (input->ExpectTag(33)) goto parse_x4;
        break;
      }
      
      // required double x4 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          goto handle_uninterpreted;
        }
       parse_x4:
        DO_(::google::protobuf::internal::WireFormatLite::ReadDouble(
              input, &x4_));
        _set_bit(3);
        if (input->ExpectTag(41)) goto parse_x5;
        break;
      }
      
      // required double x5 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          goto handle_uninterpreted;
        }
       parse_x5:
        DO_(::google::protobuf::internal::WireFormatLite::ReadDouble(
              input, &x5_));
        _set_bit(4);
        if (input->ExpectTag(49)) goto parse_x6;
        break;
      }
      
      // required double x6 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          goto handle_uninterpreted;
        }
       parse_x6:
        DO_(::google::protobuf::internal::WireFormatLite::ReadDouble(
              input, &x6_));
        _set_bit(5);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Vec6::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    Vec6::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required double x1 = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x1(), output);
  }
  
  // required double x2 = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->x2(), output);
  }
  
  // required double x3 = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->x3(), output);
  }
  
  // required double x4 = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->x4(), output);
  }
  
  // required double x5 = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->x5(), output);
  }
  
  // required double x6 = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->x6(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Vec6::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double x1 = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x1(), target);
  }
  
  // required double x2 = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->x2(), target);
  }
  
  // required double x3 = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->x3(), target);
  }
  
  // required double x4 = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->x4(), target);
  }
  
  // required double x5 = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->x5(), target);
  }
  
  // required double x6 = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->x6(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Vec6::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double x1 = 1;
    if (has_x1()) {
      total_size += 1 + 8;
    }
    
    // required double x2 = 2;
    if (has_x2()) {
      total_size += 1 + 8;
    }
    
    // required double x3 = 3;
    if (has_x3()) {
      total_size += 1 + 8;
    }
    
    // required double x4 = 4;
    if (has_x4()) {
      total_size += 1 + 8;
    }
    
    // required double x5 = 5;
    if (has_x5()) {
      total_size += 1 + 8;
    }
    
    // required double x6 = 6;
    if (has_x6()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void Vec6::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Vec6* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Vec6*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Vec6::MergeFrom(const Vec6& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_x1(from.x1());
    }
    if (from._has_bit(1)) {
      set_x2(from.x2());
    }
    if (from._has_bit(2)) {
      set_x3(from.x3());
    }
    if (from._has_bit(3)) {
      set_x4(from.x4());
    }
    if (from._has_bit(4)) {
      set_x5(from.x5());
    }
    if (from._has_bit(5)) {
      set_x6(from.x6());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Vec6::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vec6::CopyFrom(const Vec6& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vec6::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  return true;
}

void Vec6::Swap(Vec6* other) {
  if (other != this) {
    std::swap(x1_, other->x1_);
    std::swap(x2_, other->x2_);
    std::swap(x3_, other->x3_);
    std::swap(x4_, other->x4_);
    std::swap(x5_, other->x5_);
    std::swap(x6_, other->x6_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Vec6::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Vec6_descriptor_;
  metadata.reflection = Vec6_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FloorPlan::kZfloorFieldNumber;
const int FloorPlan::kZceilFieldNumber;
const int FloorPlan::kVerticesFieldNumber;
#endif  // !_MSC_VER

FloorPlan::FloorPlan() {
  SharedCtor();
}

void FloorPlan::InitAsDefaultInstance() {
}

FloorPlan::FloorPlan(const FloorPlan& from) {
  SharedCtor();
  MergeFrom(from);
}

void FloorPlan::SharedCtor() {
  _cached_size_ = 0;
  zfloor_ = 0;
  zceil_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FloorPlan::~FloorPlan() {
  SharedDtor();
}

void FloorPlan::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* FloorPlan::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FloorPlan_descriptor_;
}

const FloorPlan& FloorPlan::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();  return *default_instance_;
}

FloorPlan* FloorPlan::default_instance_ = NULL;

FloorPlan* FloorPlan::New() const {
  return new FloorPlan;
}

void FloorPlan::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zfloor_ = 0;
    zceil_ = 0;
  }
  vertices_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FloorPlan::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double zfloor = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadDouble(
              input, &zfloor_));
        _set_bit(0);
        if (input->ExpectTag(17)) goto parse_zceil;
        break;
      }
      
      // required double zceil = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          goto handle_uninterpreted;
        }
       parse_zceil:
        DO_(::google::protobuf::internal::WireFormatLite::ReadDouble(
              input, &zceil_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_vertices;
        break;
      }
      
      // repeated .indoor_context.proto.Vec2 vertices = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_vertices:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_vertices()));
        if (input->ExpectTag(26)) goto parse_vertices;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FloorPlan::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    FloorPlan::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required double zfloor = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->zfloor(), output);
  }
  
  // required double zceil = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->zceil(), output);
  }
  
  // repeated .indoor_context.proto.Vec2 vertices = 3;
  for (int i = 0; i < this->vertices_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      3, this->vertices(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FloorPlan::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double zfloor = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->zfloor(), target);
  }
  
  // required double zceil = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->zceil(), target);
  }
  
  // repeated .indoor_context.proto.Vec2 vertices = 3;
  for (int i = 0; i < this->vertices_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->vertices(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FloorPlan::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double zfloor = 1;
    if (has_zfloor()) {
      total_size += 1 + 8;
    }
    
    // required double zceil = 2;
    if (has_zceil()) {
      total_size += 1 + 8;
    }
    
  }
  // repeated .indoor_context.proto.Vec2 vertices = 3;
  total_size += 1 * this->vertices_size();
  for (int i = 0; i < this->vertices_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vertices(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void FloorPlan::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FloorPlan* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FloorPlan*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FloorPlan::MergeFrom(const FloorPlan& from) {
  GOOGLE_CHECK_NE(&from, this);
  vertices_.MergeFrom(from.vertices_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_zfloor(from.zfloor());
    }
    if (from._has_bit(1)) {
      set_zceil(from.zceil());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FloorPlan::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FloorPlan::CopyFrom(const FloorPlan& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FloorPlan::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < vertices_size(); i++) {
    if (!this->vertices(i).IsInitialized()) return false;
  }
  return true;
}

void FloorPlan::Swap(FloorPlan* other) {
  if (other != this) {
    std::swap(zfloor_, other->zfloor_);
    std::swap(zceil_, other->zceil_);
    vertices_.Swap(&other->vertices_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FloorPlan::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FloorPlan_descriptor_;
  metadata.reflection = FloorPlan_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string ImagePng::_default_data_;
#ifndef _MSC_VER
const int ImagePng::kNxFieldNumber;
const int ImagePng::kNyFieldNumber;
const int ImagePng::kDataFieldNumber;
#endif  // !_MSC_VER

ImagePng::ImagePng() {
  SharedCtor();
}

void ImagePng::InitAsDefaultInstance() {
}

ImagePng::ImagePng(const ImagePng& from) {
  SharedCtor();
  MergeFrom(from);
}

void ImagePng::SharedCtor() {
  _cached_size_ = 0;
  nx_ = 0;
  ny_ = 0;
  data_ = const_cast< ::std::string*>(&_default_data_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ImagePng::~ImagePng() {
  SharedDtor();
}

void ImagePng::SharedDtor() {
  if (data_ != &_default_data_) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* ImagePng::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImagePng_descriptor_;
}

const ImagePng& ImagePng::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();  return *default_instance_;
}

ImagePng* ImagePng::default_instance_ = NULL;

ImagePng* ImagePng::New() const {
  return new ImagePng;
}

void ImagePng::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nx_ = 0;
    ny_ = 0;
    if (_has_bit(2)) {
      if (data_ != &_default_data_) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ImagePng::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 nx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &nx_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_ny;
        break;
      }
      
      // required int32 ny = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ny:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &ny_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }
      
      // required string data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_data:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_data()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->data().data(), this->data().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ImagePng::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    ImagePng::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 nx = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nx(), output);
  }
  
  // required int32 ny = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ny(), output);
  }
  
  // required string data = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ImagePng::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 nx = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nx(), target);
  }
  
  // required int32 ny = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ny(), target);
  }
  
  // required string data = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ImagePng::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 nx = 1;
    if (has_nx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nx());
    }
    
    // required int32 ny = 2;
    if (has_ny()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ny());
    }
    
    // required string data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void ImagePng::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ImagePng* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ImagePng*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ImagePng::MergeFrom(const ImagePng& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_nx(from.nx());
    }
    if (from._has_bit(1)) {
      set_ny(from.ny());
    }
    if (from._has_bit(2)) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ImagePng::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImagePng::CopyFrom(const ImagePng& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImagePng::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void ImagePng::Swap(ImagePng* other) {
  if (other != this) {
    std::swap(nx_, other->nx_);
    std::swap(ny_, other->ny_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ImagePng::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ImagePng_descriptor_;
  metadata.reflection = ImagePng_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string TruthedFrame::_default_orient_map_file_;
#ifndef _MSC_VER
const int TruthedFrame::kIdFieldNumber;
const int TruthedFrame::kOrientMapFieldNumber;
const int TruthedFrame::kOrientMapFileFieldNumber;
#endif  // !_MSC_VER

TruthedFrame::TruthedFrame() {
  SharedCtor();
}

void TruthedFrame::InitAsDefaultInstance() {
  orient_map_ = const_cast< ::indoor_context::proto::ImagePng*>(&::indoor_context::proto::ImagePng::default_instance());
}

TruthedFrame::TruthedFrame(const TruthedFrame& from) {
  SharedCtor();
  MergeFrom(from);
}

void TruthedFrame::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  orient_map_ = NULL;
  orient_map_file_ = const_cast< ::std::string*>(&_default_orient_map_file_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TruthedFrame::~TruthedFrame() {
  SharedDtor();
}

void TruthedFrame::SharedDtor() {
  if (orient_map_file_ != &_default_orient_map_file_) {
    delete orient_map_file_;
  }
  if (this != default_instance_) {
    delete orient_map_;
  }
}

const ::google::protobuf::Descriptor* TruthedFrame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TruthedFrame_descriptor_;
}

const TruthedFrame& TruthedFrame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();  return *default_instance_;
}

TruthedFrame* TruthedFrame::default_instance_ = NULL;

TruthedFrame* TruthedFrame::New() const {
  return new TruthedFrame;
}

void TruthedFrame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (_has_bit(1)) {
      if (orient_map_ != NULL) orient_map_->::indoor_context::proto::ImagePng::Clear();
    }
    if (_has_bit(2)) {
      if (orient_map_file_ != &_default_orient_map_file_) {
        orient_map_file_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TruthedFrame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &id_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_orient_map;
        break;
      }
      
      // optional .indoor_context.proto.ImagePng orient_map = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_orient_map:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_orient_map()));
        if (input->ExpectTag(26)) goto parse_orient_map_file;
        break;
      }
      
      // optional string orient_map_file = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_orient_map_file:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_orient_map_file()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->orient_map_file().data(), this->orient_map_file().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TruthedFrame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    TruthedFrame::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional .indoor_context.proto.ImagePng orient_map = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      2, this->orient_map(), output);
  }
  
  // optional string orient_map_file = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orient_map_file().data(), this->orient_map_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->orient_map_file(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TruthedFrame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional .indoor_context.proto.ImagePng orient_map = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->orient_map(), target);
  }
  
  // optional string orient_map_file = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orient_map_file().data(), this->orient_map_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->orient_map_file(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TruthedFrame::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional .indoor_context.proto.ImagePng orient_map = 2;
    if (has_orient_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->orient_map());
    }
    
    // optional string orient_map_file = 3;
    if (has_orient_map_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->orient_map_file());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void TruthedFrame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TruthedFrame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TruthedFrame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TruthedFrame::MergeFrom(const TruthedFrame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
    if (from._has_bit(1)) {
      mutable_orient_map()->::indoor_context::proto::ImagePng::MergeFrom(from.orient_map());
    }
    if (from._has_bit(2)) {
      set_orient_map_file(from.orient_map_file());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TruthedFrame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TruthedFrame::CopyFrom(const TruthedFrame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TruthedFrame::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_orient_map()) {
    if (!this->orient_map().IsInitialized()) return false;
  }
  return true;
}

void TruthedFrame::Swap(TruthedFrame* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(orient_map_, other->orient_map_);
    std::swap(orient_map_file_, other->orient_map_file_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TruthedFrame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TruthedFrame_descriptor_;
  metadata.reflection = TruthedFrame_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string TruthedMap::_default_spec_file_;
#ifndef _MSC_VER
const int TruthedMap::kLnSceneFromSlamFieldNumber;
const int TruthedMap::kSpecFileFieldNumber;
const int TruthedMap::kFrameFieldNumber;
const int TruthedMap::kFloorplanFieldNumber;
#endif  // !_MSC_VER

TruthedMap::TruthedMap() {
  SharedCtor();
}

void TruthedMap::InitAsDefaultInstance() {
  ln_scene_from_slam_ = const_cast< ::indoor_context::proto::Vec3*>(&::indoor_context::proto::Vec3::default_instance());
  floorplan_ = const_cast< ::indoor_context::proto::FloorPlan*>(&::indoor_context::proto::FloorPlan::default_instance());
}

TruthedMap::TruthedMap(const TruthedMap& from) {
  SharedCtor();
  MergeFrom(from);
}

void TruthedMap::SharedCtor() {
  _cached_size_ = 0;
  ln_scene_from_slam_ = NULL;
  spec_file_ = const_cast< ::std::string*>(&_default_spec_file_);
  floorplan_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TruthedMap::~TruthedMap() {
  SharedDtor();
}

void TruthedMap::SharedDtor() {
  if (spec_file_ != &_default_spec_file_) {
    delete spec_file_;
  }
  if (this != default_instance_) {
    delete ln_scene_from_slam_;
    delete floorplan_;
  }
}

const ::google::protobuf::Descriptor* TruthedMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TruthedMap_descriptor_;
}

const TruthedMap& TruthedMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();  return *default_instance_;
}

TruthedMap* TruthedMap::default_instance_ = NULL;

TruthedMap* TruthedMap::New() const {
  return new TruthedMap;
}

void TruthedMap::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (ln_scene_from_slam_ != NULL) ln_scene_from_slam_->::indoor_context::proto::Vec3::Clear();
    }
    if (_has_bit(1)) {
      if (spec_file_ != &_default_spec_file_) {
        spec_file_->clear();
      }
    }
    if (_has_bit(3)) {
      if (floorplan_ != NULL) floorplan_->::indoor_context::proto::FloorPlan::Clear();
    }
  }
  frame_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TruthedMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .indoor_context.proto.Vec3 ln_scene_from_slam = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_ln_scene_from_slam()));
        if (input->ExpectTag(18)) goto parse_spec_file;
        break;
      }
      
      // optional string spec_file = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_spec_file:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_spec_file()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->spec_file().data(), this->spec_file().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(26)) goto parse_frame;
        break;
      }
      
      // repeated .indoor_context.proto.TruthedFrame frame = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_frame:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_frame()));
        if (input->ExpectTag(26)) goto parse_frame;
        if (input->ExpectTag(34)) goto parse_floorplan;
        break;
      }
      
      // optional .indoor_context.proto.FloorPlan floorplan = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_floorplan:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_floorplan()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TruthedMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    TruthedMap::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .indoor_context.proto.Vec3 ln_scene_from_slam = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->ln_scene_from_slam(), output);
  }
  
  // optional string spec_file = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->spec_file().data(), this->spec_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->spec_file(), output);
  }
  
  // repeated .indoor_context.proto.TruthedFrame frame = 3;
  for (int i = 0; i < this->frame_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      3, this->frame(i), output);
  }
  
  // optional .indoor_context.proto.FloorPlan floorplan = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      4, this->floorplan(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TruthedMap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .indoor_context.proto.Vec3 ln_scene_from_slam = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ln_scene_from_slam(), target);
  }
  
  // optional string spec_file = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->spec_file().data(), this->spec_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->spec_file(), target);
  }
  
  // repeated .indoor_context.proto.TruthedFrame frame = 3;
  for (int i = 0; i < this->frame_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->frame(i), target);
  }
  
  // optional .indoor_context.proto.FloorPlan floorplan = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->floorplan(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TruthedMap::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .indoor_context.proto.Vec3 ln_scene_from_slam = 1;
    if (has_ln_scene_from_slam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ln_scene_from_slam());
    }
    
    // optional string spec_file = 2;
    if (has_spec_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->spec_file());
    }
    
    // optional .indoor_context.proto.FloorPlan floorplan = 4;
    if (has_floorplan()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->floorplan());
    }
    
  }
  // repeated .indoor_context.proto.TruthedFrame frame = 3;
  total_size += 1 * this->frame_size();
  for (int i = 0; i < this->frame_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->frame(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void TruthedMap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TruthedMap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TruthedMap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TruthedMap::MergeFrom(const TruthedMap& from) {
  GOOGLE_CHECK_NE(&from, this);
  frame_.MergeFrom(from.frame_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_ln_scene_from_slam()->::indoor_context::proto::Vec3::MergeFrom(from.ln_scene_from_slam());
    }
    if (from._has_bit(1)) {
      set_spec_file(from.spec_file());
    }
    if (from._has_bit(3)) {
      mutable_floorplan()->::indoor_context::proto::FloorPlan::MergeFrom(from.floorplan());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TruthedMap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TruthedMap::CopyFrom(const TruthedMap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TruthedMap::IsInitialized() const {
  
  if (has_ln_scene_from_slam()) {
    if (!this->ln_scene_from_slam().IsInitialized()) return false;
  }
  for (int i = 0; i < frame_size(); i++) {
    if (!this->frame(i).IsInitialized()) return false;
  }
  if (has_floorplan()) {
    if (!this->floorplan().IsInitialized()) return false;
  }
  return true;
}

void TruthedMap::Swap(TruthedMap* other) {
  if (other != this) {
    std::swap(ln_scene_from_slam_, other->ln_scene_from_slam_);
    std::swap(spec_file_, other->spec_file_);
    frame_.Swap(&other->frame_);
    std::swap(floorplan_, other->floorplan_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TruthedMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TruthedMap_descriptor_;
  metadata.reflection = TruthedMap_reflection_;
  return metadata;
}


}  // namespace proto
}  // namespace indoor_context
